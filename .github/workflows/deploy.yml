# Arquivo: .github/workflows/deploy.yml

name: Deploy Next.js to GitHub Pages

on:
  # Executa sempre que você faz um push para o ramo 'main'
  push:
    branches: ["main"]
  # Permite que você rode este fluxo de trabalho manualmente pela aba Actions
  workflow_dispatch:

# Define as permissões que o workflow precisa para funcionar
permissions:
  contents: read
  pages: write
  id-token: write

# Define o que acontece quando o workflow roda
jobs:
  # O trabalho de "build" (construção)
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Baixa o seu código do repositório
      - name: Checkout
        uses: actions/checkout@v4
      
      # 2. Configura o ambiente Node.js e o cache do npm para builds mais rápidos
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: 'npm'

      # 3. Instala as dependências do seu projeto (incluindo o Prisma)
      - name: Install Dependencies
        run: npm install
      
      # 4. Gera o cliente do Prisma (necessário para o build)
      - name: Generate Prisma Client
        run: npx prisma generate

      # 5. Executa o build do Next.js, que gera os arquivos estáticos na pasta 'out'
      - name: Build with Next.js
        run: npm run build

      # 6. Prepara a pasta 'out' para ser publicada
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # O trabalho de "deploy" (publicação)
  deploy:
    # Precisa que o trabalho de 'build' tenha sido concluído com sucesso
    needs: build
    
    # Define o ambiente de publicação
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    steps:
      # 7. Pega o artefato gerado no passo de build e o publica no GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4